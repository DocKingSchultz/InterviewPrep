Factory Method Pattern

Purpose: Defines an interface for creating objects, but lets subclasses alter the type of objects that will be created.

Use Case: When you need flexibility in the type of objects your code creates.

Key Features:
    A factory class defines a method for object creation.
    Subclasses override the method to create specific types.

+-------------------+            +-------------------+
|   Creator         |<---------->|    Product        |
+-------------------+            +-------------------+
| + factoryMethod() |            |                   |
+-------------------+            +-------------------+
             ^
             |
+-------------------+
| ConcreteCreator   |
+-------------------+
| + factoryMethod() |
+-------------------+

Implementation :

// Product Interface
interface Product {
    void use();
}

// Concrete Product A
class ProductA implements Product {
    public void use() {
        System.out.println("Using Product A");
    }
}

// Concrete Product B
class ProductB implements Product {
    public void use() {
        System.out.println("Using Product B");
    }
}

// Creator Class
abstract class Creator {
    abstract Product factoryMethod();

    public void useProduct() {
        Product product = factoryMethod();
        product.use();
    }
}

// Concrete Creator A
class CreatorA extends Creator {
    @Override
    Product factoryMethod() {
        return new ProductA();
    }
}

// Concrete Creator B
class CreatorB extends Creator {
    @Override
    Product factoryMethod() {
        return new ProductB();
    }
}


Concrete example :
Notification system where notifications can be sent via different mediums,
such as Email or SMS.
The client code doesn't need to know how these notifications are created;
it just asks the factory to produce a notification

public enum Status
{
    FAILURE,
    SUCCESS,
    PENDING
}

public enum ProtocolType
{
    SMS,
    EMAIL
}

public abstract class Message
{
    private Timestamp timestamp;
    private String messageContent;
}

public class SMS extends Message
{
    private Channel ch;
}
public class Email extends Message
{
    User sender;
    User receiver;
}


public interface CommProtocol
{
    public Status send(Message m);
    public Status receive(Message m);
}
public class SMSProtocol implements CommProtocol
{
    public Status send(Message m)
    {

        Channel channel = m1.ch;
        synchronized(channel)
        {
            st = channel.send ...
        }
        return st;
    }
    public Status receive(Message m1)
    {

        Channel channel = m1.ch;
        synchronized(channel)
        {
            st = channel.receive(m1)
        }
        return st;
    }
}
public class Email implements CommProtocol
{
    public Status send(Message m)
    {

        EmailAdapter adapter = new EmailAdapter(m.sender, m.receiver);
        synchronized(adapter)
        {
            Status st = adapter.send(m1.timestamp, m1.messageContent)
        }
        return st;
    }
    public Status receive(Message m1)
    {
        EmailAdapter adapter = new EmailAdapter(m.sender, m.receiver);
        synchronized(adapter)
        {
            Status st = adapter.receive(m)
        }
        return st;
    }
}

ProtocolFactory
{
    public Protocol createProtocolComm(ProtocolType protType)
    {
        switch(protType)
        {
            case SMS: {
             return new SMSProtocol()
            }
            case EMAIL:
            {
             return new EmailProtocol()
            }
            default :
                thorw new IllegalArgumentException("Invalid protocol type");
        }
    }
}

