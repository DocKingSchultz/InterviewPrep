
Breadth-First Search (BFS) Algorithm:
Breadth-First Search (BFS) is a graph traversal algorithm that explores nodes level by level.
Unlike DFS, which dives as deep as possible into one branch before backtracking,
BFS explores all neighbors of a node before moving on to the next level.


Breadth-First Search (BFS) Algorithm: Overall Explanation
Breadth-First Search (BFS) is a graph traversal algorithm that explores nodes level by level.
Unlike DFS, which dives as deep as possible into one branch before backtracking,
BFS explores all neighbors of a node before moving on to the next level.

Key Concepts of BFS
1.Queue-Based Exploration
    BFS uses a queue to track nodes to be explored.
    Nodes are processed in a first-in, first-out (FIFO) order, ensuring level-order traversal.

2.Level-by-Level Traversal:
    Nodes closer to the starting node are explored before deeper nodes.
    BFS is ideal for problems like finding the shortest path in an unweighted graph.

3.Marking Nodes:
    Each node is marked as visited when it is added to the queue (or when processed).

is this also the solution     public void bfs(int r, int c, char[][] grid)
public void bfs(int r, int c, char[][] grid)
  {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{r,c});
        grid[r][c] = '0';
        while(!queue.isEmpty())
        {
            var coord = queue.poll();
            int r = coord[0];
            int c = coord[1];
            if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || grid[r][c] == '0') continue;

            grid[r][c] = '0';

            for (int[] direction : directions) {
                int newRow = r + direction[0];
                int newCol = c + direction[1];
                queue.add(int[]{newRow, newCol});
            }
        }
   }